@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<style>
    .bus {
        color: whitesmoke;
        text-align: center;
    }
</style>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"
   integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
   crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"
   integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="
   crossorigin=""></script>
<script src="js/leaflet-realtime.min.js"></script>

<div class="bus"></div>

<div id='map' style='width: 100%; height: 800px'></div>
<script>
(async () => {
    const url = 'api/locations';
    let busLocations = await fetch(url).then((res) => res.json());

    var accessToken = 'pk.eyJ1IjoiY29uaGFpbmluZyIsImEiOiJjazJucDduMWIwc3N6M214NWNvNHp5YTN1In0.BXXScY-poKaEBDizUeYDUQ';
    var map = L.map('map').setView([55.949680, -3.204165], 12);

    L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
        maxZoom: 18,
        id: 'conhaining/ck7p9dybm05up1io58zj7u77f',
        tileSize: 512,
        zoomOffset: -1,
        accessToken: accessToken
    }).addTo(map);

    var liveBusLocationsOptions = {
        pointToLayer: (geoJsonPoint, latlng) => makeBusPoint(geoJsonPoint, latlng)
    }
    var liveBusLocations = L.geoJSON(busLocations, liveBusLocationsOptions);

    L.realtime({
        url: url,
        crossOrigin: true,
        type: 'json'
    }, {
        interval: 10 * 1000,
        getFeatureId: function(featureData){
            return featureData.properties.vehicleId;
        },
        container: liveBusLocations,
        pointToLayer: (geoJsonPoint, latlng) => makeBusPoint(geoJsonPoint, latlng)
    }).addTo(map);

    function makeBusPoint(geoJsonPoint, latlng) {
        var icon =  L.divIcon({
            html: `<div style="background-color: ${geoJsonPoint.properties.colour}">${geoJsonPoint.properties.name}</div>`,
            className: 'bus',
            iconSize: 24
        });
        return L.marker(latlng, {icon: icon});
        return L.circle(latlng, {color: geoJsonPoint.properties.colour});
    }
})();
</script>