// <auto-generated />
using System;
using EveryBus.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EveryBus.Migrations
{
    [DbContext(typeof(BusContext))]
    [Migration("20200219212103_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("EveryBus.Domain.Models.BusServices", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("EveryBus.Domain.Models.Point", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<long>("Latitude")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Longitude")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RouteId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StopId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("EveryBus.Domain.Models.Route", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("BusServicesId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BusServicesId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("EveryBus.Domain.Models.VehicleLocation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Heading")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JourneyId")
                        .HasColumnType("TEXT");

                    b.Property<int>("LastGpsFix")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("NextStopId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Speed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VehicleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VehicleLocations");
                });

            modelBuilder.Entity("EveryBus.Domain.Models.Point", b =>
                {
                    b.HasOne("EveryBus.Domain.Models.Route", null)
                        .WithMany("Points")
                        .HasForeignKey("RouteId");
                });

            modelBuilder.Entity("EveryBus.Domain.Models.Route", b =>
                {
                    b.HasOne("EveryBus.Domain.Models.BusServices", null)
                        .WithMany("Routes")
                        .HasForeignKey("BusServicesId");
                });
#pragma warning restore 612, 618
        }
    }
}
